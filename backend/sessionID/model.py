from typing import List, Optional
from sqlalchemy.types import String, Uuid
from sqlalchemy import text, DateTime, BigInteger, Identity, Column
from sqlalchemy.orm import Mapped, mapped_column, relationship
from backend import db
from datetime import datetime
import uuid

class SessionID(db.Model):
    __tablename__ = "sessionid_table"
    __table_args__ = {"prefixes": ["UNLOGGED"]}
    # https://docs.sqlalchemy.org/en/20/core/defaults.html#identity-ddl
    # session_id: Mapped[int] = mapped_column(BigInteger, primary_key=True) # session_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
    # session_id = Column(BigInteger, Identity(always=True), primary_key=True)
    session_id: Mapped[uuid.UUID] = mapped_column(
        Uuid, primary_key=True, server_default=text("gen_random_uuid()")
    )
    user_id: Mapped[uuid.UUID] = mapped_column(Uuid)
    expires_after: Mapped[datetime.date] = mapped_column(DateTime)